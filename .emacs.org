#+AUTHOR: Cyber Research Systems
#+LANGUAGE: english
#+PROPERTY: header-args :exports code :tangle .emacs
#+STARTUP: indent
#+STARTUP: showeverything
#+TITLE: GNU Emacs configuration file

* GNU Emacs configuration file header
#+begin_src emacs-lisp
;;; Package --- .emacs
;;; Commentary:
;;; GNU Emacs configuration file
;;; -*- lexical-binding: t; -*-
;;; -*- no-byte-compile: t; -*-

;;; Code:
;;; Reducing Emacs Startup Time
(setq-default gc-cons-threshold most-positive-fixnum)

(defun reset-gc-cons-threshold ()
  "Reset `gc-cons-threshold' to its default value."
  (setq-default gc-cons-threshold 800000))
(add-hook 'emacs-startup-hook 'reset-gc-cons-threshold)
#+end_src

* Load built-in features
#+begin_src emacs-lisp
(require 'ansi-color nil :noerror)
(require 'autoinsert nil :noerror)
(require 'bookmark   nil :noerror)
(require 'bs         nil :noerror)
(require 'cc-mode    nil :noerror)
(require 'cl-indent  nil :noerror)
(require 'cl-lib     nil :noerror)
(require 'comint     nil :noerror)
(require 'compile    nil :noerror)
(require 'dired      nil :noerror)
(require 'dired-x    nil :noerror)
(require 'dirtrack   nil :noerror)
(require 'doc-view   nil :noerror)
(require 'ediff      nil :noerror)
(require 'eldoc      nil :noerror)
(require 'eshell     nil :noerror)
(require 'find-dired nil :noerror)
(require 'flyspell   nil :noerror)
(require 'font-lock  nil :noerror)
(require 'ibuffer    nil :noerror)
(require 'ido        nil :noerror)
(require 'image-mode nil :noerror)
(require 'imenu      nil :noerror)
(require 'info       nil :noerror)
(require 'ispell     nil :noerror)
(require 'message    nil :noerror)
(require 'profiler   nil :noerror)
(require 'recentf    nil :noerror)
(require 'savehist   nil :noerror)
(require 'saveplace  nil :noerror)
(require 'shell      nil :noerror)
(require 'subr-x     nil :noerror)
(require 'subword    nil :noerror)
(require 'thingatpt  nil :noerror)
(require 'time       nil :noerror)
(require 'tramp      nil :noerror)
(require 'uniquify   nil :noerror)
(require 'warnings   nil :noerror)
(require 'wdired     nil :noerror)
(require 'whitespace nil :noerror)
(require 'windmove   nil :noerror)
#+end_src

* Aliases
#+begin_src emacs-lisp
(defalias 'list-buffers 'ibuffer    )
(defalias 'perl-mode    'cperl-mode )
(defalias 'yes-or-no-p  'y-or-n-p   )
#+end_src

* Modes
#+begin_src emacs-lisp
(abbrev-mode                       1 )
(auto-fill-mode                   -1 )
(auto-insert-mode                 -1 )
(column-number-mode                1 )
(delete-selection-mode             1 )
(desktop-save-mode                -1 )
(display-time-mode                 1 )
(eldoc-mode                        1 )
(electric-indent-mode              1 )
(electric-pair-mode               -1 )
(file-name-shadow-mode             1 )
(flyspell-mode                    -1 )
(global-auto-revert-mode           1 )
(global-display-line-numbers-mode -1 )
(global-font-lock-mode             1 )
(global-hl-line-mode              -1 )
(global-prettify-symbols-mode      1 )
(global-subword-mode               1 )
(global-visual-line-mode          -1 )
(global-whitespace-mode            1 )
(icomplete-mode                    1 )
(ido-mode                          1 )
(line-number-mode                  1 )
(linum-mode                       -1 )
(menu-bar-mode                    -1 )
(minibuffer-depth-indicate-mode    1 )
(recentf-mode                      1 )
(save-place-mode                   1 )
(savehist-mode                     1 )
(scroll-bar-mode                  -1 )
(show-paren-mode                   1 )
(size-indication-mode              1 )
(subword-mode                      1 )
(tab-bar-mode                     -1 )
(tab-line-mode                    -1 )
(tool-bar-mode                    -1 )
(tooltip-mode                     -1 )
(transient-mark-mode               1 )
(use-hard-newlines                -1 )
(which-function-mode              -1 )
(window-divider-mode              -1 )
#+end_src

* Variables with numeric value
#+begin_src emacs-lisp
(setq-default auto-revert-interval            1    )
(setq-default auto-save-timeout             500    )
(setq-default c-basic-offset                  2    )
(setq-default calendar-week-start-day         1    )
(setq-default display-time-interval           1    )
(setq-default echo-keystrokes                 0.1  )
(setq-default gc-cons-percentage              0.1  )
(setq-default history-length               1000    )
(setq-default kept-new-versions               2    )
(setq-default kept-old-versions               1    )
(setq-default lazy-highlight-initial-delay    0    )
(setq-default lazy-highlight-interval         0    )
(setq-default message-log-max              1000    )
(setq-default recentf-max-menu-items         10    )
(setq-default recentf-max-saved-items       100    )
(setq-default scroll-conservatively        1000    )
(setq-default scroll-down-aggressively        0.01 )
(setq-default scroll-margin                   1    )
(setq-default scroll-step                     1    )
(setq-default scroll-up-aggressively          0.01 )
(setq-default sh-basic-offset                 2    )
(setq-default show-paren-delay                0    )
(setq-default standard-indent                 2    )
(setq-default tab-width                       2    )
(setq-default whitespace-line-column        100    )
#+end_src

* Variables with logical value
#+begin_src emacs-lisp
(setq-default apropos-do-all                          t   )
(setq-default auto-revert-avoid-polling               nil )
(setq-default auto-revert-check-vc-info               t   )
(setq-default auto-revert-remote-files                t   )
(setq-default auto-revert-use-notify                  nil )
(setq-default auto-revert-verbose                     nil )
(setq-default auto-save-default                       t   )
(setq-default auto-window-vscroll                     nil )
(setq-default backup-by-copying                       t   )
(setq-default blink-matching-paren                    t   )
(setq-default bookmark-completion-ignore-case         t   )
(setq-default bookmark-save-flag                      t   )
(setq-default c-mark-wrong-style-of-comment           t   )
(setq-default case-fold-search                        t   )
(setq-default column-number-indicator-zero-based      nil )
(setq-default completion-ignore-case                  t   )
(setq-default confirm-kill-processes                  nil )
(setq-default create-lockfiles                        nil )
(setq-default cursor-in-non-selected-windows          nil )
(setq-default debug-on-error                          t   )
(setq-default debug-on-quit                           nil )
(setq-default delete-auto-save-files                  t   )
(setq-default delete-by-moving-to-trash               t   )
(setq-default delete-old-versions                     t   )
(setq-default delete-trailing-lines                   t   )
(setq-default dired-dwim-target                       t   )
(setq-default dired-hide-details-hide-symlink-targets nil )
(setq-default dired-ls-F-marks-symlinks               t   )
(setq-default dired-omit-extensions                   nil )
(setq-default dired-omit-mode                         nil )
(setq-default dired-omit-verbose                      nil )
(setq-default display-time-24hr-format                t   )
(setq-default display-time-day-and-date               nil )
(setq-default display-time-default-load-average       nil )
(setq-default enable-recursive-minibuffers            t   )
(setq-default enable-remote-dir-locals                t   )
(setq-default eshell-kill-processes-on-exit           t   )
(setq-default file-name-handler-alist                 nil )
(setq-default find-file-visit-truename                t   )
(setq-default font-lock-maximum-decoration            t   )
(setq-default frame-resize-pixelwise                  t   )
(setq-default gdb-enable-debug                        t   )
(setq-default gdb-many-windows                        nil )
(setq-default gdb-show-changed-values                 t   )
(setq-default gdb-show-main                           t   )
(setq-default gdb-show-threads-by-default             t   )
(setq-default gdb-speedbar-auto-raise                 t   )
(setq-default history-delete-duplicates               t   )
(setq-default ibuffer-expert                          t   )
(setq-default ibuffer-show-empty-filter-groups        nil )
(setq-default ido-enable-flex-matching                t   )
(setq-default ido-everywhere                          t   )
(setq-default ido-use-virtual-buffers                 t   )
(setq-default imenu-auto-rescan                       t   )
(setq-default imenu-use-popup-menu                    nil )
(setq-default indent-tabs-mode                        nil )
(setq-default inhibit-compacting-font-caches          t   )
(setq-default inhibit-splash-screen                   t   )
(setq-default inhibit-startup-buffer-menu             t   )
(setq-default inhibit-startup-message                 t   )
(setq-default inhibit-startup-screen                  t   )
(setq-default initial-buffer-choice                   nil )
(setq-default initial-scratch-message                 nil )
(setq-default ispell-dictionary                       nil )
(setq-default ispell-really-aspell                    nil )
(setq-default ispell-really-hunspell                  t   )
(setq-default kill-whole-line                         t   )
(setq-default large-file-warning-threshold            nil )
(setq-default lexical-binding                         t   )
(setq-default line-move-visual                        nil )
(setq-default load-prefer-newer                       t   )
(setq-default make-backup-files                       t   )
(setq-default make-pointer-invisible                  t   )
(setq-default message-log-max                         t   )
(setq-default mouse-drag-copy-region                  nil )
(setq-default mouse-wheel-follow-mouse                t   )
(setq-default mouse-wheel-progressive-speed           t   )
(setq-default mouse-yank-at-point                     t   )
(setq-default next-line-add-newlines                  nil )
(setq-default package-check-signature                 nil )
(setq-default package-enable-at-startup               nil )
(setq-default python-indent-guess-indent-offset       nil )
(setq-default query-replace-highlight                 t   )
(setq-default read-buffer-completion-ignore-case      t   )
(setq-default read-file-name-completion-ignore-case   t   )
(setq-default recenter-redisplay                      nil )
(setq-default require-final-newline                   t   )
(setq-default resize-mini-windows                     nil )
(setq-default save-interprogram-paste-before-kill     t   )
(setq-default save-place-forget-unreadable-files      t   )
(setq-default savehist-save-minibuffer-history        t   )
(setq-default scroll-error-top-bottom                 t   )
(setq-default scroll-preserve-screen-position         t   )
(setq-default search-highlight                        t   )
(setq-default select-enable-clipboard                 t   )
(setq-default select-enable-primary                   nil )
(setq-default sentence-end-double-space               nil )
(setq-default set-mark-command-repeat-pop             t   )
(setq-default shift-select-mode                       nil )
(setq-default show-trailing-whitespace                t   )
(setq-default split-height-threshold                  nil )
(setq-default split-width-threshold                   nil )
(setq-default system-uses-terminfo                    nil )
(setq-default tags-revert-without-query               t   )
(setq-default track-eol                               t   )
(setq-default truncate-lines                          t   )
(setq-default truncate-partial-width-windows          nil )
(setq-default uniquify-after-kill-buffer-p            t   )
(setq-default use-dialog-box                          nil )
(setq-default use-file-dialog                         nil )
(setq-default vc-follow-symlinks                      t   )
(setq-default vc-make-backup-files                    t   )
(setq-default version-control                         t   )
(setq-default visible-bell                            t   )
(setq-default warning-suppress-types                  nil )
(setq-default wdired-allow-to-change-permissions      t   )
(setq-default wdired-allow-to-redirect-links          t   )
(setq-default wdired-confirm-overwrite                t   )
(setq-default wdired-use-dired-vertical-movement      t   )
(setq-default wdired-use-interactive-rename           t   )
(setq-default window-combination-resize               t   )
(setq-default window-divider-default-places           nil )
(setq-default x-stretch-cursor                        t   )
#+end_src

* Variables with calculable value
#+begin_src emacs-lisp
(setq-default large-file-warning-threshold (* 10240 10240 ) )
(setq-default message-log-max              (*  1024  1024 ) )
(setq-default read-process-output-max      (*  1024  1024 ) )
(setq-default undo-limit                   (* 10240 10240 ) )
#+end_src

* Variables with string value
#+begin_src emacs-lisp
(setq-default c-default-style          "stroustrup"           )
(setq-default custom-file              "~/.emacs.d/custom.el" )
(setq-default dired-listing-switches   "-a -F -G -h -l"       )
(setq-default explicit-shell-file-name "/bin/bash"            )
(setq-default frame-title-format       "GNU Emacs"            )
(setq-default shell-file-name          "/bin/bash"            )
(setq-default tramp-default-method     "ssh"                  )
(setq-default uniquify-separator       "::"                   )
#+end_src

* Variables with symbolic value
#+begin_src emacs-lisp
(setq-default ad-redefinition-action               'accept                        )
(setq-default async-shell-command-buffer           'rename-buffer                 )
(setq-default backup-directory-alist               '(("." . "~/.emacs.d/backup")) )
(setq-default backward-delete-char-untabify-method 'hungry                        )
(setq-default browse-url-browser-function          'browse-url-generic            )
(setq-default calendar-date-style                  'european                      )
(setq-default dired-recursive-copies               'always                        )
(setq-default dired-recursive-deletes              'top                           )
(setq-default ediff-window-setup-function          'ediff-setup-windows-plain     )
(setq-default initial-major-mode                   'lisp-interaction-mode         )
(setq-default lisp-indent-function                 'lisp-indent-function          )
(setq-default major-mode                           'text-mode                     )
(setq-default mouse-wheel-scroll-amount            '(1 ((shift) . 1))             )
(setq-default prettify-symbols-unprettify-at-point 'right-edge                    )
(setq-default recenter-positions                   '(middle top bottom)           )
(setq-default ring-bell-function                   'ignore                        )
(setq-default save-abbrevs                         'silently                      )
(setq-default select-active-regions                'only                          )
(setq-default show-paren-style                     'mixed                         )
(setq-default tab-always-indent                    'complete                      )
(setq-default uniquify-buffer-name-style           'forward                       )
(setq-default vc-handled-backends                  '(git svn)                     )
(setq-default whitespace-style                     '(face lines tabs trailing)    )
#+end_src

* Functions
** Begin using Ibuffer to edit a list of buffers
#+begin_src emacs-lisp
(defun begin-using-Ibuffer ()
  "Begin using Ibuffer to edit a list of buffers."
  (interactive)
  (split-and-balance-windows )
  (ibuffer                   ) )
#+end_src

** Customize C/C++ programming mode
#+begin_src emacs-lisp
(defun customize-C/C++-programming-mode ()
  "Customize C/C++ programming mode."
  (interactive)
  (c-toggle-auto-hungry-state      1 )
  (c-toggle-auto-newline           1 )
  (c-toggle-comment-style         -1 )
  (c-toggle-electric-state         1 )
  (c-toggle-parse-state-debug      1 )
  (c-toggle-syntactic-indentation  1 ) )
#+end_src

** Delete duplicate lines and sort
#+begin_src emacs-lisp
(defun ddls ()
  "Delete duplicate lines and sort."
  (interactive)
  (delete-duplicate-lines     (region-beginning) (region-end))
  (sort-lines             nil (region-beginning) (region-end)) )
#+end_src

** Format buffer before saving
#+begin_src emacs-lisp
(defun format-buffer-before-saving ()
  "Format buffer before saving."
  (interactive)
  (save-excursion
    (recenter)
    (delete-trailing-whitespace)
    (if (equal major-mode 'makefile-gmake-mode)
        (tabify (point-min) (point-max) )
      (untabify (point-min) (point-max) ))
    (unless (or (equal major-mode 'fundamental-mode    )
                (equal major-mode 'makefile-gmake-mode )
                (equal major-mode 'python-mode         )
                (equal major-mode 'text-mode           ) )
      (indent-region (point-min) (point-max)) ))
  (save-buffer) nil)
#+end_src

** Insert an empty line above the current line and indent
#+begin_src emacs-lisp
(defun insert-an-empty-line-above-the-current-line-and-indent ()
  "Insert an empty line above the current line and indent."
  (interactive)
  (end-of-line        0 )
  (open-line          0 )
  (newline-and-indent   ) )
#+end_src

** Kill all other buffers
#+begin_src emacs-lisp
(defun kill-all-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (delete-other-windows)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list) ))
  (message "All other buffers was killed!"))
#+end_src

** Run an inferior Scheme process
#+begin_src emacs-lisp
(defun exec-scheme ()
  "Run an inferior Scheme process."
  (interactive)
  (autoload 'run-scheme  "cmuscheme" "Run an inferior Scheme" t )
  (autoload 'scheme-mode "cmuscheme" "Major mode for Scheme"  t )
  (cond ( (executable-find "scheme" )
          (save-selected-window (run-scheme "scheme" )) )
        ( (executable-find "guile"  )
          (save-selected-window (run-scheme "guile"  )) ) ))
#+end_src

** Signal an error if variable is obsolete
#+begin_src emacs-lisp
(defun signal-an-error-if-variable-is-obsolete ()
  "Signal an error if variable is obsolete."
  (interactive)
  (defvar variable-doc-string)
  (setq variable-doc-string (describe-variable (symbol-at-point)))
  (if  (string-match "obsolete" variable-doc-string)
      (error "This variable is obsolete")
    (message "The test is passed successfully") ))
#+end_src

** Split and balance windows
#+begin_src emacs-lisp
(defun split-and-balance-windows ()
  "Split and balance windows."
  (interactive)
  (split-window-sensibly   )
  (other-window          1 )
  (balance-windows         ) )
#+end_src

** Start a terminal emulator in a new window
#+begin_src emacs-lisp
(defun running-a-terminal-emulator ()
  "Start a terminal emulator in a new window."
  (interactive)
  (split-and-balance-windows)
  (when (string-equal system-type "gnu/linux")
    (ansi-term (executable-find "bash"))
    (defadvice term-handle-exit
        (after term-kill-buffer-on-exit activate)
      (if (>= (length (window-list)) 2)
          (progn (kill-buffer) (delete-window))
        (kill-buffer) )) ))
#+end_src

** Toggle spell checker with selectable dictionary
#+begin_src emacs-lisp
(defun toggle-spell-checker ()
  "Toggle spell checker with selectable dictionary."
  (interactive)
  (if (bound-and-true-p flyspell-mode)
      (flyspell-mode-off)
    (progn
      (if (derived-mode-p 'prog-mode)
          (flyspell-prog-mode)
        (flyspell-mode))
      (ispell-change-dictionary
       (completing-read
        "Use new dictionary (RET for *default*): "
        (and (fboundp 'ispell-valid-dictionary-list)
             (mapcar 'list
                     (ispell-valid-dictionary-list)))
        nil t)) )) )
#+end_src

* Common settings
** C/C++ programming
#+begin_src emacs-lisp
(add-hook 'makefile-mode-hook
          '(lambda () (setq-default indent-tabs-mode t)) )
(add-hook 'c-mode-common-hook 'customize-C/C++-programming-mode)
#+end_src

** Checking and Correcting Spelling
#+begin_src emacs-lisp
(cond
 ( (executable-find "hunspell" )
   (setq-default ispell-program-name "/usr/bin/hunspell" ) )
 ( (executable-find "aspell"   )
   (setq-default ispell-program-name "/usr/bin/aspell"   ) ) )
#+end_src

** Default Python interpreter for shell
#+begin_src emacs-lisp
(cond
 ((executable-find "ipython")
  (setq-default python-shell-interpreter      "ipython"            )
  (setq-default python-shell-interpreter-args "--simple-prompt -i" ) )
 ((executable-find "python")
  (setq-default python-shell-interpreter      "python"             )
  (setq-default python-shell-interpreter-args "-i"                 ) ) )
#+end_src

** Indicate empty lines
#+begin_src emacs-lisp
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines)
  (setq-default indicate-empty-lines t))
#+end_src

** Load bookmarks if exists
#+begin_src emacs-lisp
(if (file-exists-p bookmark-default-file)
    (bookmark-load bookmark-default-file t))
#+end_src

** [[https://www.gnu.org/software/emacs/manual/html_mono/octave-mode.html][Octave Mode]]
#+begin_src emacs-lisp
(defun run-an-inferior-Octave-process ()
  "Run an inferior Octave process."
  (interactive)
  (save-selected-window (run-octave nil)) )
(when (executable-find "octave")
  (add-hook    'octave-mode-hook 'run-an-inferior-Octave-process )
  (add-to-list 'auto-mode-alist  '("\\.m$" . octave-mode)        ) )
#+end_src

** Scheme programming
#+begin_src emacs-lisp
(add-hook 'scheme-mode-hook 'exec-scheme)
#+end_src

** The name of the browser program
#+begin_src emacs-lisp
(setq-default browse-url-generic-program (executable-find "firefox"))
#+end_src

** UI settings
#+begin_src emacs-lisp
(when (display-graphic-p)
  (blink-cursor-mode )
  (display-time      )
  (fringe-mode       )
  (set-cursor-color "red")
  (setq-default cursor-type 'box)
  (cond ((member "JetBrains Mono" (font-family-list))
         (set-frame-font "Jetbrains Mono 12" t t))
        ((member "Hermit" (font-family-list))
         (set-frame-font "Hermit 12" t t))
        ((member "Fantasque Sans Mono" (font-family-list))
         (set-frame-font "Fantasque Sans Mono 14" t t))
        ((member "DejaVu Sans Mono" (font-family-list))
         (set-frame-font "DejaVu Sans Mono 12" t t)))
  (add-to-list 'default-frame-alist '(height .   30) )
  (add-to-list 'default-frame-alist '(width  .  120) )
  (setq-default indicate-buffer-boundaries '(( bottom . left )
                                             ( down   . left )
                                             ( top    . left )
                                             ( up     . left )
                                             ( t      . left )) )
  (set-frame-parameter (selected-frame) (quote  alpha) (quote (95 . 95) ))
  (add-to-list 'default-frame-alist     (quote (alpha    .    (95 . 95) )) ))
#+end_src

** Working with Coding Systems and Unicode in Emacs
#+begin_src emacs-lisp
(prefer-coding-system          'utf-8 )
(set-buffer-file-coding-system 'utf-8 )
(set-default-coding-systems    'utf-8 )
(set-file-name-coding-system   'utf-8 )
(set-keyboard-coding-system    'utf-8 )
(set-language-environment      'utf-8 )
(set-terminal-coding-system    'utf-8 )
#+end_src

* Customizing Key Bindings
** Function keys behavior
#+begin_src emacs-lisp
(global-set-key (kbd "<f1>"  ) 'running-a-terminal-emulator )
(global-set-key (kbd "<f2>"  ) 'begin-using-Ibuffer         )
(global-set-key (kbd "<f3>"  ) 'comment-line                )
(global-set-key (kbd "<f4>"  ) 'toggle-spell-checker        )
(global-set-key (kbd "<f5>"  ) 'bookmark-set                )
(global-set-key (kbd "<f6>"  ) 'bookmark-jump               )
(global-set-key (kbd "<f7>"  ) 'bookmark-bmenu-list         )
(global-set-key (kbd "<f8>"  ) 'kmacro-start-macro          )
(global-set-key (kbd "<f9>"  ) 'kmacro-end-macro            )
(global-set-key (kbd "<f10>" ) 'kmacro-call-macro           )
(global-set-key (kbd "<f11>" ) 'toggle-frame-fullscreen     )
(global-set-key (kbd "<f12>" ) 'kill-all-other-buffers      )
#+end_src

** Set up keybindings for 'windmove'
#+begin_src emacs-lisp
(windmove-default-keybindings 'shift)
#+end_src

** Unset unused key bindings
#+begin_src emacs-lisp
(global-unset-key (kbd "<deletechar>" ) )
(global-unset-key (kbd "<end>"        ) )
(global-unset-key (kbd "<home>"       ) )
(global-unset-key (kbd "<insert>"     ) )
(global-unset-key (kbd "<next>"       ) )
(global-unset-key (kbd "<prior>"      ) )
(global-unset-key [down               ] )
(global-unset-key [left               ] )
(global-unset-key [right              ] )
(global-unset-key [up                 ] )
#+end_src

** User defined key bindings
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>"    ) 'keyboard-escape-quit                                   )
(global-set-key (kbd "C-<return>"  ) 'insert-an-empty-line-above-the-current-line-and-indent )
(global-set-key (kbd "C-c C-f"     ) 'recentf-open-files                                     )
(global-set-key (kbd "C-x C-d"     ) 'dired                                                  )
(global-set-key (kbd "C-x C-s"     ) 'format-buffer-before-saving                            )
(global-set-key (kbd "S-C-<down>"  ) 'shrink-window                                          )
(global-set-key (kbd "S-C-<left>"  ) 'shrink-window-horizontally                             )
(global-set-key (kbd "S-C-<right>" ) 'enlarge-window-horizontally                            )
(global-set-key (kbd "S-C-<up>"    ) 'enlarge-window                                         )
#+end_src

* External packages
** Setting up manager for Emacs Lisp packages
#+begin_src emacs-lisp
(require 'package nil :noerror)
(add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/"        ) t )
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/" ) t )
(add-to-list 'package-archives '("org"          . "https://orgmode.org/elpa/"          ) t )
(package-initialize)
(unless package-archive-contents (ignore-errors (package-refresh-contents)))
#+end_src

** [[https://github.com/jwiegley/use-package][use-package]]
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(when (require 'use-package nil :noerror)
  (setq-default use-package-always-ensure t   )
  (setq-default use-package-verbose       nil ) )
#+end_src

*** [[https://github.com/abo-abo/avy][avy]]
#+begin_src emacs-lisp
(use-package avy
  :defer t
  :init
  (setq-default avy-all-windows nil )
  (setq-default avy-background  t   )
  :commands ( avy-goto-char
              avy-goto-line
              avy-goto-word-1 )
  :bind
  ( ("M-g c" . avy-goto-char   )
    ("M-g l" . avy-goto-line   )
    ("M-g w" . avy-goto-word-1 ) ) )
#+end_src

*** [[https://cider.mx/][CIDER]]
#+begin_src emacs-lisp
(use-package cider
  :defer t
  :if   (executable-find "clojure")
  :hook (clojure-mode . cider-mode) )
#+end_src

*** [[https://github.com/Lindydancer/cmake-font-lock][cmake-font-lock]]
#+begin_src emacs-lisp
(use-package cmake-font-lock
  :defer t
  :if (executable-find "cmake")
  :commands cmake-font-lock-activate
  :config
  (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
  :hook (cmake-mode . cmake-font-lock-activate) )
#+end_src

*** [[https://melpa.org/#/cmake-mode][cmake-mode]]
#+begin_src emacs-lisp
(use-package cmake-mode
  :defer t
  :if (executable-find "cmake") )
#+end_src

*** [[https://company-mode.github.io/][company-mode]]
#+begin_src emacs-lisp
(use-package company
  :defer t
  :init
  (setq-default company-idle-delay            0 )
  (setq-default company-selection-wrap-around t )
  (setq-default company-tooltip-limit         5 )
  :commands ( company-complete
              company-select-next
              company-select-previous
              company-show-doc-buffer )
  :hook (prog-mode . company-mode)
  :bind
  ( :map company-active-map
         ("<tab>" . company-complete        )
         ("C-d"   . company-show-doc-buffer )
         ("C-n"   . company-select-next     )
         ("C-p"   . company-select-previous ) ) )
#+end_src

*** [[https://github.com/abo-abo/swiper][Counsel]]
#+begin_src emacs-lisp
(use-package counsel
  :defer t
  :init
  (ido-mode     -1 )
  (counsel-mode    )
  :commands ( counsel-find-file
              counsel-M-x       )
  :bind
  ( ("C-x C-f" . counsel-find-file )
    ("M-x"     . counsel-M-x       ) ) )
#+end_src

**** [[https://github.com/redguardtoo/counsel-etags][counsel-etags]]
#+begin_src emacs-lisp
(use-package counsel-etags
  :defer t
  :if (or (executable-find "ctags")
          (executable-find "etags") )
  :requires counsel
  :init
  (add-hook 'prog-mode-hook
            (lambda ()
              (add-hook 'after-save-hook
                        'counsel-etags-virtual-update-tags 'append 'local) ) )
  :config
  (setq-default counsel-etags-update-interval 60)
  (push "build" counsel-etags-ignore-directories) )
#+end_src

**** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
#+begin_src emacs-lisp
(use-package counsel-projectile
  :defer t
  :after    (counsel projectile      )
  :requires (counsel projectile      )
  :config   (counsel-projectile-mode ) )
#+end_src

*** [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]]
#+begin_src emacs-lisp
(use-package doom-themes
  :defer t
  :if window-system
  :init
  (doom-themes-org-config         )
  (doom-themes-visual-bell-config )
  (setq-default doom-themes-enable-bold   t     )
  (setq-default doom-themes-enable-italic t     )
  (load-theme 'doom-palenight             t nil ) )
#+end_src

*** [[https://github.com/jorgenschaefer/elpy][Elpy]]
#+begin_src emacs-lisp
(use-package elpy
  :defer t
  :if (executable-find "python")
  :init
  (elpy-enable)
  (add-hook 'elpy-mode-hook
            (lambda () (add-hook 'before-save-hook 'elpy-format-code    nil t )) )
  (add-hook 'elpy-mode-hook
            (lambda () (add-hook 'before-save-hook 'elpy-black-fix-code nil t )) ) )
#+end_src

*** [[https://github.com/magnars/expand-region.el][Expand region]]
#+begin_src emacs-lisp
(use-package expand-region
  :defer t
  :commands er/expand-region
  :bind ("C-=" . er/expand-region) )
#+end_src

*** [[https://www.flycheck.org/en/latest/][Flycheck]]
#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :init (global-flycheck-mode) )
#+end_src

*** [[https://github.com/lassik/emacs-format-all-the-code][format-all]]
#+begin_src emacs-lisp
(use-package format-all
  :defer t)
#+end_src

*** [[https://www.nongnu.org/geiser/][Geiser]]
#+begin_src emacs-lisp
(defun exec-geiser ()
  "Run an inferior Scheme (Geiser) process."
  (interactive)
  (cond ( (executable-find "scheme" )
          (setq-default geiser-active-implementations '(chez  ))
          (save-selected-window (run-geiser 'chez  )) )
        ( (executable-find "guile"  )
          (setq-default geiser-active-implementations '(guile ))
          (save-selected-window (run-geiser 'guile )) )) )

(use-package geiser
  :defer t
  :if (or (executable-find "guile"  )
          (executable-find "scheme" ) )
  :pin melpa-stable
  :init
  (add-to-list 'auto-mode-alist  '("\\.ss$" . scheme-mode) )
  (remove-hook 'scheme-mode-hook 'exec-scheme              )
  :hook (scheme-mode . exec-geiser) )
#+end_src

*** [[https://github.com/emacsorphanage/git-gutter][git-gutter]]
#+begin_src emacs-lisp
(use-package git-gutter
  :defer t
  :if   (executable-find "git"  )
  :init (global-git-gutter-mode ) )
#+end_src

*** [[https://github.com/emacsorphanage/gnuplot][gnuplot-mode]]
#+begin_src emacs-lisp
(use-package gnuplot-mode
  :defer t
  :if (executable-find "gnuplot")
  :init
  (add-to-list 'auto-mode-alist  '("\\.gp$" . gnuplot-mode) )
  :config
  (autoload 'gnuplot-mode        "gnuplot" "Gnuplot major mode"            t )
  (autoload 'gnuplot-make-buffer "gnuplot" "Open a buffer in gnuplot-mode" t ) )
#+end_src

*** [[https://github.com/tarsius/hl-todo][hl-todo]]
#+begin_src emacs-lisp
(use-package hl-todo
  :defer t
  :init (global-hl-todo-mode) )
#+end_src

*** [[https://github.com/abo-abo/swiper][Ivy]]
#+begin_src emacs-lisp
(use-package ivy
  :defer t
  :init
  (ivy-mode)
  (setq-default ivy-initial-inputs-alist  nil )
  (setq-default ivy-use-selectable-prompt t   )
  (setq-default ivy-use-virtual-buffers   t   )
  (setq-default ivy-wrap                  t   ) )
#+end_src

*** [[https://emacs-lsp.github.io/lsp-mode/][LSP Mode]]
#+begin_src emacs-lisp
(use-package lsp-mode
  :defer t
  :if (or (executable-find "clangd"      )
          (executable-find "clojure-lsp" ) )
  :commands (lsp lsp-command-map lsp-rename)
  :requires yasnippet
  :config
  (setq-default lsp-auto-guess-root              t   )
  (setq-default lsp-eldoc-render-all             t   )
  (setq-default lsp-enable-file-watchers         t   )
  (setq-default lsp-enable-symbol-highlighting   nil )
  (setq-default lsp-headerline-breadcrumb-enable nil )
  (setq-default lsp-lens-enable                  t   )
  (setq-default lsp-modeline-code-actions-enable nil )
  (setq-default lsp-modeline-diagnostics-enable  nil )
  (setq-default lsp-progress-via-spinner         nil )
  (setq-default lsp-semantic-highlighting        t   )
  (setq-default lsp-semantic-tokens-enable       t   )
  (setq-default lsp-clients-clangd-args
                '("-j=4" "--background-index"
                  "--clang-tidy" "--log=error"))
  :hook
  ( (c++-mode           . lsp )
    (c-mode             . lsp )
    (clojure-mode       . lsp )
    (clojurec-mode      . lsp )
    (clojurescript-mode . lsp )
    (python-mode        . lsp ) )
  :bind ( :map lsp-mode-map
               ("M-<return>" . lsp-rename) ) )
#+end_src

**** [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]]
#+begin_src emacs-lisp
(use-package lsp-ivy
  :defer t
  :after (ivy lsp)
  :requires (ivy lsp) )
#+end_src

*** [[https://magit.vc/][Magit]]
#+begin_src emacs-lisp
(use-package magit
  :defer t
  :if (executable-find "git")
  :commands magit-status
  :bind ("C-x g" . magit-status) )
#+end_src

*** [[https://github.com/ludwigpacifici/modern-cpp-font-lock][modern-cpp-font-lock]]
#+begin_src emacs-lisp
(use-package modern-cpp-font-lock
  :defer t
  :config
  (modern-c++-font-lock-global-mode) )
#+end_src

*** [[https://orgmode.org/][Org Mode]]
#+begin_src emacs-lisp
(use-package org
  :defer t
  :ensure org-plus-contrib
  :config
  (require 'ob        nil :noerror )
  (require 'org-tempo nil :noerror )
  (org-babel-do-load-languages 'org-babel-load-languages
                               '( ( awk        . t )
                                  ( emacs-lisp . t )
                                  ( gnuplot    . t )
                                  ( lisp       . t )
                                  ( makefile   . t )
                                  ( org        . t )
                                  ( perl       . t )
                                  ( python     . t )
                                  ( scheme     . t )
                                  ( sed        . t )
                                  ( shell      . t ) ) )
  (setq-default org-checkbox-hierarchical-statistics         nil              )
  (setq-default org-confirm-babel-evaluate                   nil              )
  (setq-default org-fontify-done-headline                    t                )
  (setq-default org-fontify-quote-and-verse-blocks           t                )
  (setq-default org-fontify-whole-heading-line               t                )
  (setq-default org-hide-emphasis-markers                    t                )
  (setq-default org-outline-path-complete-in-steps           nil              )
  (setq-default org-refile-use-outline-path                  t                )
  (setq-default org-return-follows-link                      t                )
  (setq-default org-src-ask-before-returning-to-edit-buffer  nil              )
  (setq-default org-src-preserve-indentation                 t                )
  (setq-default org-src-tab-acts-natively                    t                )
  (setq-default org-src-window-setup                        'reorganize-frame )
  (setq-default org-startup-folded                           nil              )
  (setq-default org-startup-indented                         t                ) )
#+end_src

**** [[https://github.com/integral-dw/org-superstar-mode][org-superstar]]
#+begin_src emacs-lisp
(use-package org-superstar
  :defer t
  :after org
  :commands org-superstar-mode
  :hook (org-mode . org-superstar-mode) )
#+end_src

*** [[https://github.com/bbatsov/projectile][Projectile]]
#+begin_src emacs-lisp
(use-package projectile
  :defer t
  :if (executable-find "git")
  :after    ivy
  :requires ivy
  :commands projectile-command-map
  :init (projectile-mode)
  :config
  (setq-default projectile-completion-system 'ivy             )
  (setq-default projectile-indexing-method   'native          )
  (setq-default projectile-sort-order        'recently-active )
  :bind ( :map projectile-mode-map
               ("C-c p" . projectile-command-map) ) )
#+end_src

*** [[https://www.racket-mode.com/][Racket Mode]]
#+begin_src emacs-lisp
(use-package racket-mode
  :defer t
  :if (executable-find "racket")
  :init
  (add-to-list 'auto-mode-alist  '("\\.rkt$" . racket-mode) )
  :commands racket-unicode-input-method-enable
  :hook ( (racket-mode      . racket-unicode-input-method-enable )
          (racket-repl-mode . racket-unicode-input-method-enable ) ) )
#+end_src

*** [[https://common-lisp.net/project/slime/][SLIME]]
#+begin_src emacs-lisp
(use-package slime
  :defer t
  :if (executable-find "sbcl")
  :config
  (require 'slime-autoloads nil :noerror)
  (setq-default common-lisp-style-default "sbcl" )
  (setq-default inferior-lisp-program     "sbcl" )
  (slime-setup
   '(slime-asdf slime-fancy slime-tramp slime-indentation) ) )
#+end_src

*** [[https://github.com/Fuco1/smartparens][smartparens]]
#+begin_src emacs-lisp
(use-package smartparens
  :defer t
  :commands smartparens-mode
  :hook (prog-mode . smartparens-mode) )
#+end_src

*** [[https://github.com/TheBB/spaceline][Spaceline]]
#+begin_src emacs-lisp
(use-package spaceline
  :defer t
  :init
  (spaceline-spacemacs-theme)
  (setq-default spaceline-window-numbers-unicode    t )
  (setq-default spaceline-workspace-numbers-unicode t ) )
#+end_src

*** [[https://github.com/abo-abo/swiper][Swiper]]
#+begin_src emacs-lisp
(use-package swiper
  :defer t
  :commands swiper
  :init (setq-default swiper-action-recenter t)
  :bind ("C-s" . swiper) )
#+end_src

*** [[https://github.com/justbur/emacs-which-key][which-key]]
#+begin_src emacs-lisp
(use-package which-key
  :defer t
  :init
  (which-key-mode                           )
  (which-key-setup-minibuffer               )
  (which-key-setup-side-window-right-bottom )
  (setq-default which-key-idle-delay             0.3 )
  (setq-default which-key-side-window-max-height 0.3 )
  (setq-default which-key-side-window-max-width  0.3 ) )
#+end_src

*** [[https://github.com/joaotavora/yasnippet][YASnippet]]
#+begin_src emacs-lisp
(use-package yasnippet
  :defer t
  :init (yas-global-mode)
  :requires yasnippet-snippets)
#+end_src

**** [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :defer t
  :after yasnippet)
#+end_src

* GNU Emacs configuration file end
#+begin_src emacs-lisp
(message (emacs-init-time))

(provide '.emacs)
;;; .emacs ends here
#+end_src
